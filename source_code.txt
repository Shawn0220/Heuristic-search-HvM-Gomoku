#include <iostream>
#include <time.h>
#include <stdlib.h>
#include <graphics.h>
#include <conio.h>
using namespace std;

// 落子位置和分数
class location
{
public:
	int i = 0;      // y 坐标
	int j = 0;      // x 坐标
	int number = 0; // 分数
};

// 棋盘每个格子
class box
{
public:
	void draw();            // 绘制
public:
	int x = 0;              // x 坐标
	int y = 0;              // y 坐标
	int value = -1;         // 值（黑棋：1，白棋：0，空位：-1）
	int background = 0;          // 模式
	bool isnew = false;     // 是否被选中
	COLORREF color = WHITE; // 棋盘背景色
};

box BOX[19][19];      // 19X19棋盘
int win = -1;         // 赢家（0：白棋，1：黑棋，2：平局）
int playcnt = 0;
bool changeflag = false;
int whosturn = 0;      // 轮到谁下棋了
int playercolor = 0;  // 玩家颜色
int dx[4]{ 1,0,1,1 }; // - | \ / 数组内的数值表示增量的四个方向 （向右平移，向下平移，向右下移，向右上移） 同时取反可以扩展到 8 个方向
int dy[4]{ 0,1,1,-1 };
int score[3][5] = //评分表
{
	{ 0, 90, 250, 500, 500 }, // 0个敌方棋子 0 1 2 3 4个己方棋子
	{ 0, 0,  80,  300, 450 }, // 1个敌方棋子 0 1 2 3 4个己方棋子
	{ 0, 0,  0,  70,  400 }  // 2个敌方棋子 0 1 2 3 4个己方棋子
};
int bestx[361];   //最优x坐标
int besty[361];   //最优y坐标
int bestcnt = 0; //最优解数

// 函数声明
void draw();                  // 绘制
void init();                  // 初始化
location findbestlocation(int color, int c); // 寻找最佳位置
void isWIN();                 // 判断输赢
void game();                  // 游戏主函数

// main函数
int main()
{
	initgraph(700, 700); // 初始化绘图环境
	setbkcolor(WHITE);
	cleardevice();
	setbkmode(TRANSPARENT); // 设置透明文字输出背景

	while (1)
	{
		init(); // 初始化
		game(); // 游戏开始
		cleardevice();
	}
}

// 类函数定义

// box的draw方法绘制
void box::draw()
{
	COLORREF thefillcolor = getfillcolor(); // 备份填充颜色
	setlinestyle(PS_SOLID, 3);              // 线样式设置
	setfillcolor(color);                    // 填充颜色设置
	solidrectangle(x, y, x + 30, y + 30);   // 绘制无边框的正方形
	if (isnew)
	{
		// 如果是新下的
		// 绘制边框线
		setlinecolor(RED);
		line(x + 1, y + 2, x + 20, y + 2);
		line(x + 2, y + 1, x + 2, y + 20);
		line(x + 29, y + 2, x + 22, y + 2);
		line(x + 29, y + 1, x + 29, y + 20);
		line(x + 2, y + 29, x + 20, y + 29);
		line(x + 2, y + 22, x + 2, y + 29);
		line(x + 29, y + 29, x + 18, y + 29);
		line(x + 29, y + 18, x + 29, y + 29);
	}
	setlinecolor(BLACK);
	switch (background)
	{
		// 以下是不同位置格子内部棋盘绘制的样式
	case 0:
		line(x + 15, y, x + 15, y + 30);
		line(x - 1, y + 15, x + 30, y + 15);
		break;
	case 1:
		line(x + 14, y + 15, x + 30, y + 15);
		setlinestyle(PS_SOLID, 3);
		line(x + 15, y, x + 15, y + 30);
		setlinestyle(PS_SOLID, 2);
		break;
	case 2:
		line(x - 1, y + 15, x + 15, y + 15);
		setlinestyle(PS_SOLID, 3);
		line(x + 15, y, x + 15, y + 30);
		setlinestyle(PS_SOLID, 2);
		break;
	case 3:
		line(x + 15, y + 15, x + 15, y + 30);
		setlinestyle(PS_SOLID, 3);
		line(x - 1, y + 15, x + 30, y + 15);
		setlinestyle(PS_SOLID, 2);
		break;
	case 4:
		line(x + 15, y, x + 15, y + 15);
		setlinestyle(PS_SOLID, 3);
		line(x - 1, y + 15, x + 30, y + 15);
		setlinestyle(PS_SOLID, 2);
		break;
	case 5:
		setlinestyle(PS_SOLID, 3);
		line(x + 15, y, x + 15, y + 15);
		line(x + 15, y + 15, x + 30, y + 15);
		setlinestyle(PS_SOLID, 2);
		break;
	case 6:
		setlinestyle(PS_SOLID, 3);
		line(x + 15, y, x + 15, y + 15);
		line(x - 1, y + 15, x + 15, y + 15);
		setlinestyle(PS_SOLID, 2);
		break;
	case 7:
		setlinestyle(PS_SOLID, 3);
		line(x - 1, y + 15, x + 15, y + 15);
		line(x + 15, y + 15, x + 15, y + 30);
		setlinestyle(PS_SOLID, 2);
		break;
	case 8:
		setlinestyle(PS_SOLID, 3);
		line(x + 15, y + 15, x + 30, y + 15);
		line(x + 15, y + 15, x + 15, y + 30);
		setlinestyle(PS_SOLID, 2);
		break;
	case 9:
		line(x + 15, y, x + 15, y + 30);
		line(x - 1, y + 15, x + 30, y + 15);
		setfillcolor(BLACK);
		setlinestyle(PS_SOLID, 1);
		fillcircle(x + 15, y + 15, 4);
		break;
	}
	switch (value)
	{
	case 0: // 白棋
		setfillcolor(WHITE);
		setlinestyle(PS_SOLID, 1);
		fillcircle(x + 15, y + 15, 13);
		break;
	case 1: // 黑棋
		setfillcolor(BLACK);
		setlinestyle(PS_SOLID, 1);
		fillcircle(x + 15, y + 15, 13);
		break;
	}
	setfillcolor(thefillcolor); // 还原填充色
}

// 其他函数定义

// 绘制棋盘
void draw()
{
	int number = 0; // 坐标输出的位置
	// 坐标（数值）
	TCHAR strnum[19][3] = { _T("1"),_T("2") ,_T("3") ,_T("4"),_T("5") ,_T("6") ,_T("7"),_T("8"),_T("9"),_T("10"), _T("11"),_T("12") ,_T("13") ,_T("14"),_T("15") ,_T("16") ,_T("17"),_T("18"),_T("19") };
	// 坐标（字母）
	TCHAR strabc[19][3] = { _T("A"),_T("B") ,_T("C") ,_T("D"),_T("E") ,_T("F") ,_T("G"),_T("H"),_T("I"),_T("J"), _T("K"),_T("L") ,_T("M") ,_T("N"),_T("O") ,_T("P") ,_T("Q"),_T("R"),_T("S") };
	LOGFONT nowstyle;
	gettextstyle(&nowstyle);
	settextstyle(0, 0, NULL);
	for (int i = 0; i < 19; i++)
	{
		for (int j = 0; j < 19; j++)
		{
			BOX[i][j].draw(); // 绘制
			if (BOX[i][j].isnew == true)
			{
				BOX[i][j].isnew = false; // 把上一个下棋位置的黑框清除
			}
		}
	}
	// 标注坐标
	for (int i = 0; i < 19; i++)
	{
		outtextxy(75 + number, 35, strabc[i]);
		outtextxy(53, 55 + number, strnum[i]);
		number += 30;
	}
	settextstyle(&nowstyle);
}

// 棋盘初始化
void init()
{
	win = -1;// 谁赢了
	for (int i = 0, k = 0; i < 570; i += 30)
	{
		for (int j = 0, g = 0; j < 570; j += 30)
		{
			int background = 0;  // 棋盘样式
			BOX[k][g].value = -1;
			BOX[k][g].color = RGB(255, 227, 132);// 棋盘底色
			// x、y 坐标
			BOX[k][g].x = 65 + j;
			BOX[k][g].y = 50 + i;
			// 棋盘样式的判断
			if (k == 0 && g == 0)
				background = 8;
			else if (k == 0 && g == 18)
				background = 7;
			else if (k == 18 && g == 18)
				background = 6;
			else if (k == 18 && g == 0)
				background = 5;
			else if (k == 0)
				background = 3;
			else if (k == 18)
				background = 4;
			else if (g == 0)
				background = 1;
			else if (g == 18)
				background = 2;
			else
				background = 0;
			BOX[k][g].background = background;
			g++;
		}
		k++;
	}
}

// 核心函数

// 寻找最佳位置
location findbestlocation(int color, int c)
{
	if (c == 0)
	{
		//如果是第一层
		//清空数组
		bestcnt = 0;
	}
	int MAXnumber = INT_MIN;    //最佳分数
	for (int i = 0; i < 19; i++) {
		for (int j = 0; j < 19; j++) {
			if (BOX[i][j].value == -1) { // 空位 -1
				//遍历每一个空位置
				int length;        //当前方向长度
				int emeny;         //当前方向敌子
				int nowi = 0;      //现在遍历到的y坐标
				int nowj = 0;      //现在遍历到的x坐标
				int thescore = 0;  //这个位置的初始分数

				//判断5X5的范围内有没有棋子
				int flag = 0;
				for (int k = 0; k < 4; k++)
				{
					nowi = i;
					nowj = j;
					nowi += dx[k];
					nowj += dy[k];
					if (nowi >= 0 && nowj >= 0&& nowi <= 18 && nowj <= 18&& BOX[nowi][nowj].value != -1) // 测试某方向的棋子，在棋盘内，且非空
					{
						flag = 1;
						break;
					}
					nowi = i;
					nowj = j;
					nowi += dx[k];
					nowj += dy[k];
					if (nowi >= 0 && nowj >= 0&& nowi <= 18 && nowj <= 18&& BOX[nowi][nowj].value != -1)
					{
						flag = 1;
						break;
					}
					nowi = i;
					nowj = j;
					nowi -= dx[k];
					nowj -= dy[k];
					if (nowi >= 0 && nowj >= 0&& nowi <= 18 && nowj <= 18&& BOX[nowi][nowj].value != -1)
					{
						flag = 1;
						break;
					}
					nowi = i;
					nowj = j;
					nowi -= dx[k];
					nowj -= dy[k];
					if (nowi >= 0 && nowj >= 0&& nowi <= 18 && nowj <= 18&& BOX[nowi][nowj].value != -1)
					{
						flag = 1;
						break;
					}
				}
				if (!flag)
				{
					//如果周围没有棋子，查找下一个空位
					continue;
				}
				
				//己方
				BOX[i][j].value = color; // 尝试下在这里
				for (int k = 0; k < 4; k++) // 检测四个方向 自己棋子和对方棋子 的数量
				{
					
					length = 0;
					emeny = 0;
					nowi = i;
					nowj = j;
					while (nowi <= 18 && nowj <= 18 && nowi >= 0 && nowj >= 0 && BOX[nowi][nowj].value == color) // 己方棋子
					{
						length++;
						nowj += dy[k];
						nowi += dx[k];
					}
					if (nowi < 0 || nowj < 0 || nowi > 18 || nowj > 18 || BOX[nowi][nowj].value == !color) // 对方棋子
					{
						emeny++;
					}

					nowi = i;
					nowj = j;
					while (nowi <= 18 && nowj <= 18 && nowi >= 0 && nowj >= 0 && BOX[nowi][nowj].value == color) // 己方棋子
					{
						length++;
						nowj -= dy[k];
						nowi -= dx[k];
					}
					if (nowi < 0 || nowj < 0 || nowi > 18 || nowj > 18 || BOX[nowi][nowj].value == !color) // 对方棋子
					{
						emeny++;
					}

					length -= 2; // 判断长度 （减2是因为从假设的nowi,j出发本身算了两次，需要的length是已落子的实际长度）
					if (length > 4)
					{
						length = 4;
					}
					if (score[emeny][length] == 500) 
					{
						BOX[i][j].value = -1;
						return{ i,j,score[emeny][length] };
					}
					thescore += score[emeny][length];
					length = 0;
					emeny = 0;
				}


				//敌人（原理同上）
				BOX[i][j].value = !color;
				for (int k = 0; k < 4; k++)
				{
					length = 0;
					emeny = 0;
					nowi = i;
					nowj = j;
					while (nowi <= 18 && nowj <= 18 && nowi >= 0 && nowj >= 0 && BOX[nowi][nowj].value == !color)
					{
						length++;
						nowj += dy[k];
						nowi += dx[k];
					}
					if (nowi < 0 || nowj < 0 || nowi > 18 || nowj > 18 || BOX[nowi][nowj].value == color)
					{
						emeny++;
					}
					nowi = i;
					nowj = j;
					while (nowi <= 18 && nowj <= 18 && nowi >= 0 && nowj >= 0 && BOX[nowi][nowj].value == !color)
					{
						length++;
						nowj -= dy[k];
						nowi -= dx[k];
					}
					if (nowi < 0 || nowj < 0 || nowi > 18 || nowj > 18 || BOX[nowi][nowj].value == color)
					{
						emeny++;
					}
					length -= 2;
					if (length > 4)
					{
						length = 4;
					}
					if (score[emeny][length] == 500)
					{
						BOX[i][j].value = -1;
						return{ i,j,score[emeny][length] };
					}
					thescore += score[emeny][length];
					length = 0;
					emeny = 0;
				}

				BOX[i][j].value = -1;
				if (c < 3) // 超过4层，时间太长；少于4层，决策太差
				{
					
					BOX[i][j].value = color; // 置顶该位置为color，递归寻找对方！color的分数
					int nowscore = thescore - findbestlocation(!color, c + 1).number - 50*c; // 递归求出对方在没有此位置后可获得的最优的分值 nowscore代表（己方分-对方分）
					BOX[i][j].value = -1;
					if (nowscore > MAXnumber)
					{
						MAXnumber = nowscore;
						if (c == 0)
						{
							bestcnt = 0; // 每个位置第一次递归时，重置数组清空
						}
					}
					if (c == 0)
					{
						//第一层
						if (nowscore >= MAXnumber)
						{
							//把当前位置加入数组
							bestx[bestcnt] = i;
							besty[bestcnt] = j;
							bestcnt++;
						}
					}
				}
				else {
					//如果递归到了第四层
					if (thescore > MAXnumber)
					{
						MAXnumber = thescore;
					}
					}
			}
		}
	}
	if (MAXnumber == 500 && playcnt == 3) // 如果三手黑方优势，电脑决定交换棋子
		changeflag = true;
	if (c == 0)
	{
		int mynum = rand() % bestcnt;
		return { bestx[mynum],besty[mynum],MAXnumber };
	}
	//其他层
	return { 0,0,MAXnumber };
}

// 判断输赢
void isWIN()
{
	bool isfull = true; // 棋盘是否满了
	for (int i = 0; i < 19; i++)
	{
		for (int j = 0; j < 19; j++)
		{
			if (BOX[i][j].value != -1)
			{
				// 遍历每个可能的位置
				int nowcolor = BOX[i][j].value; // 现在遍历到的颜色
				int length[4] = { 0,0,0,0 };    // 四个方向的长度
				for (int k = 0; k < 4; k++)
				{
					// 原理同寻找最佳位置
					int nowi = i;
					int nowj = j;
					while (nowi <= 18 && nowj <= 18 && nowi >= 0 && nowj >= 0 && BOX[nowi][nowj].value == nowcolor)
					{
						length[k]++;
						nowj += dx[k];
						nowi += dy[k];
					}
					nowi = i;
					nowj = j;
					while (nowi <= 18 && nowj <= 18 && nowi >= 0 && nowj >= 0 && BOX[nowi][nowj].value == 1 - nowcolor)
					{
						length[k]++;
						nowj -= dx[k];
						nowi -= dy[k];
					}
				}
				for (int k = 0; k < 4; k++)
				{
					if (length[k] >= 5) {
						// 如果满五子
						if (nowcolor == playercolor)
						{
							win = playercolor; // 玩家胜
						}
						if (nowcolor == 1 - playercolor)
						{
							win = 1 - playercolor; // 电脑胜
						}
					}
				}
			}
			else
			{
				//如果为空
				isfull = false;//棋盘没满
			}
		}
	}
	if (isfull)
	{
		// 如果棋盘满了
		win = 2; // 平局
	}
}

// 游戏主函数
void game()
{
	bool isinit;
	// 上一个鼠标停的坐标
	int oldi = 0;
	int oldj = 0;

	playercolor = 1;
	// 绘制背景
	setfillcolor(RGB(255, 227, 132));
	solidrectangle(40, 25, 645, 630);
	// 设置字体样式
	settextstyle(30, 15, 0, 0, 0, 1000, false, false, false);
	settextcolor(BLACK);
	// 输出标示语
	if (playercolor == 0)
	{
		isinit = 1;
		outtextxy(150, 650, _T("玩家执白后行，电脑执黑先行"));
		whosturn = 1;
	}
	else
	{
		isinit = 0;
		outtextxy(150, 650, _T("玩家执黑先行，电脑执白后行"));
		whosturn = 0;
	}
	draw(); // 绘制
	while (1)
	{
	NEXTPLAYER:
		// 玩家下棋
		if (whosturn == 0)
		{
			MOUSEMSG mouse = GetMouseMsg(); // 获取鼠标信息
			for (int i = 0; i < 19; i++)
			{
				for (int j = 0; j < 19; j++)
				{
					if (mouse.x > BOX[i][j].x && mouse.x<BOX[i][j].x + 30//判断x坐标
						&& mouse.y>BOX[i][j].y && mouse.y < BOX[i][j].y + 30//判断y坐标
						&& BOX[i][j].value == -1)//判断是否是空位置
					{
						// 如果停在某一个空位置上面
						if (mouse.mkLButton)
						{
							// 如果按下了
							BOX[i][j].value = playercolor; // 下棋
							BOX[i][j].isnew = true;        // 新位置更新
							oldi = -1;
							oldj = -1;
							// 下一个玩家
							whosturn = 1;
							goto DRAW;
						}
						// 更新选择框
						BOX[oldi][oldj].isnew = false;
						BOX[oldi][oldj].draw();
						BOX[i][j].isnew = true;
						BOX[i][j].draw();
						oldi = i;
						oldj = j;
					}
				}
			}
		}
		// 电脑下棋
		else
		{
			if (isinit)
			{
				// 开局情况
				isinit = 0;
				int drawi = 9;
				int drawj = 9;
				while (BOX[drawi][drawj].value != -1)
				{
					drawi--;
					drawj++;
				}
				BOX[drawi][drawj].value = 1 - playercolor;
				BOX[drawi][drawj].isnew = true;
			}
			else
			{
				location best;
				best = findbestlocation(1 - playercolor, 0); // 寻找最佳位置
				if (changeflag)
					break;
				BOX[best.i][best.j].value = 1 - playercolor;//下在最佳位置
				BOX[best.i][best.j].isnew = true;
			}
			whosturn = 0;
			goto DRAW; // 轮到下一个
		}
	}
DRAW: // 绘制
	isWIN(); // 检测输赢
	draw();
	oldi = 0;
	oldj = 0;
	if (win == -1)
	{
		// 如果没有人胜利
		Sleep(500);
		playcnt = playcnt + 1; /////////////////////////////////////////////////////////////////////////////////
		if (changeflag) { // 三手交换
			playercolor = 0;
			whosturn = 0;
			setfillcolor(RGB(255, 255, 255));
			fillrectangle(000, 650, 700, 680);
			setfillcolor(RGB(255, 227, 132));
			outtextxy(115, 650, _T("电脑选择三手交换，玩家现执白棋"));
		}
		changeflag = false;
		goto NEXTPLAYER; // 前往下一个玩家
	}
	// 胜利处理
	settextcolor(RGB(0, 255, 0));
	Sleep(1000);
	if (win == 0)
	{
		fillrectangle(000, 650, 700, 680);
		setfillcolor(RGB(255, 227, 132));
		settextcolor(BLACK);
		outtextxy(320, 650, _T("白胜"));
	}
	if (win == 1)
	{
		fillrectangle(000, 650, 700, 680);
		setfillcolor(RGB(255, 227, 132));
		settextcolor(BLACK);
		outtextxy(320, 650, _T("黑胜"));
	}
	if (win == 2)
	{
		fillrectangle(000, 650, 700, 680);
		setfillcolor(RGB(255, 227, 132));
		settextcolor(BLACK);
		outtextxy(320, 650, _T("平局"));
	}
	// 给反应时间
	Sleep(50000);
	return;
}